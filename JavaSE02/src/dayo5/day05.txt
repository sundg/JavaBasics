计时器(定时器)Timer
	1、可以安排自动计划任务的类，每一个任务都是一个线程
	2、创建Timer实例
	3、Timer.schedule()可以为Timer实例增加计划任务，计划任务是一个接口(TimerTask)
	4、cancel()清除计时器对象上的所有计划任务
	
	
创建线程的方式：
	1、继承Thread类
	实现步骤：
		a、继承Thread类，覆盖run()，提供并发运行过程
		b、创建这个类的实例
		c、使用start()启动线程
	2、实现runnable接口
	实现步骤：
		a、实现Runnable接口，实现run()方法
		b、创建这个类的实例，用这个实例作为Thread的构造器参数
		c、创建Thread类实例
		d、使用start()启动线程
	3、使用内部类/匿名内部类创建线程
	
线程的状态
	1、new		  新建状态，还内有启动
	2、Runnable	  可运行状态(就绪)
	3、Running	  正在运行，该线程已经获取了CPU
			a、假设线程获取了CPU，则进入Running状态，开始执行线程体
			b、假设系统只有一个CPU，那么在任意时间点只有一个线程处于Running状态，
			      如果是双核，那么在同一时间点，会有两条线程处于Running状态，但是当
			      线程数大于处理器数依然会是多条线程在同一个CPU轮换执行
			c、当一条线程开始运行的时候，如果它不是一瞬间完成，那么它不可能一直处
			      于Running状态，线程在执行过程中会被中断，目的是为了让其他线程获得
			      执行机会，像这样的线程调度的策略取决于底层平台，对于抢占式策略的平
			      台来说，系统会给每一个可执行的线程一小段时间来处理任务。当该时间片
			      段用完了，系统会剥夺线程所占资源(CPU)，让其他线程获得运行机会
			      
	4、Block	     阻塞(挂起)状态
			a、以下情况会发生阻塞状态
				1、线程使用了sleep(),主动放弃了CPU资源
				2、线程调用了阻塞式IO方法(比如控制台输入方法)，该方法返回前，该线程被阻塞
				....
			b、当正在运行的线程被阻塞的时候，其他线程就会获得机会，阻塞结束的时候，
			      该线程将进入Runnable，而非直接进入Running状态	
			      		
	5、Dead	   死亡状态     run()执行结束，线程进入死亡状态
			不要试图对一个已经死亡的线程调用start(),死亡将不能再次作为线程执行，会抛出异常
	
	
程序、进程、线程三者之间的关系：
	程序是由一个或多个进程组成的
	进程是由一个或多个线程组成的
	
	
线程的状态管理：
	1、Thread.yield()
		让出CPU，当线程让出处理器(离开Running)，使它进入Runnable等待
	2、Thread.sleep()
		使当前线程从Running放弃处理器进入Block状态，休眠times毫秒，再返回Runnable，
		如果其他线程打断了当前线程的Block(sleep)就会发生InterruptedException
		
线程的常用属性和方法：
	1、线程的优先级
		setPriority(等级1-10)
	2、后台线程(守护线程)
		setDaemon(true)
	3、获取线程的名字
		getName()
	4、获取当前线程
		Thread.currentThread()
	
	
sleep状态的打断与唤醒
	1、Thread.sleep(times)  进入休眠(times)
	2、interrupt() 	打断、中断休眠
	3、被唤醒的线程会出现中断异常	
	

线程池：Java1.5提供的并发包
	Executors是工厂类，包含工厂用于创建Executor接口的实例
	
	"汽车工厂"	
	

java反射机制
	类、方法、属性都是名词概念
	java中有相应的特殊类：方法类(Method) 属性类(Field)  构造器类(Constructor)  类类(Class)
	反射是java自我管理这些(类、对象)的机制
	
	1、反射的作用：
		a、可以通过反射机制发现对象的类型，发现类型的方法、属性和构造器
		b、可以创建对象并访问任意对象的方法和属性
	2、Class加载	：
		类加载到内存中，java将磁盘中的类文件加载到内存中
	3、Class实例代表java中的类型
		a、获得基本类型的实例
			int.class   long.class
		b、获得类(Class)类型的实例
			Class cla=String.class;
			Class cla=Class.forName("");
			Class cla="abc".getClass();
			以上三个方法cla都是同一个对象，就是String类加载到内存的结果
	
socket网络编程
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
