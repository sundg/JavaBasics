CSS
第一章
1.1 what css
	CSS 层叠样式表(Cascading style sheet)
	是关于HTML文件的所有标签的字体，大小尺寸，颜色，外观样式等的美化定义
1.2 why css
	html--->样式属性很少，只能简单粗糙演示内容
	css--->给HTML披上了华丽的衣服
			css样式可以和HTML标签内容分隔开
			容易维护，让美化更加简单高效
1.3 CSS 基础语法
	标准语法：
		selector{样式声明表达式1；
				 样式声明表达式2;
				 ...;
				 样式声明表达式N;
				}
	CSS语法两大部分
		1、选择器selector  (定位)
			--->根据选择器语法获取的页面的特定标签对象集合
		2、样式表达式	  
			--->美化标签对象的具体的属性设置声明
	定位--->美化      selector---->{表达式}
		表达式--->CSS属性:CSS值;
				  CSS2属性：CSS值2;
	head标签---->引入外部文件和脚本模块
	<style>
		css语句...
	</style>
			
1.4 CSS选择器
	1.4.1标签选择器
		以标签关键字来做选择器，用来选择同一类标签的集合
		语法案例：
			p{样式表达式}--->获取页面所有的p标签对象进行表达式声明的美化	
	1.4.2类选择器
		以标签的class属性的值来做选择器，用来选择相同class属性值的标签对象集合，可以跨不同类别的标签
		语法定义：
			标签中调用 class="abc"
			style语法块声明
			.abc{表达式}		
补充常用的CSS样式属性
	width/height:标签内容的尺寸  单位px需要填写
	html--->单位不写       css--->建议填写
			
	1.4.3 ID选择器
		根据标签的ID属性值来定位标签对象集合(建议是唯一的对象)
		语法：
			声明调用  标签对象 id=abc		
			声明样式   #abc{表达式}
1.5  引入CSS的三种方式
	1)行内样式    标签通用属性style
	2)内部样式    head标签内style语句块
	3)外部样式    head标签内 引入外部样式表
		a、--->定义一个以.css为后缀的文件，直接写css语句
		b、HTML引入外部样式表
			head--->
				<link href="样式文件路径" rel="stylesheet" type="text/css"/>
补充：
	text-align  --->文本类标签，文字水平位置			
			
1.6 css注释
	/* */ 注释语法    style，abc.css
	
1.7 基本选择器和三种方式的优先级
	1)行内样式，内部样式，外部样式测试	
		行内样式>内部样式>外部样式
	   --->越在里面的，优先级越高
	2)ID,类，标签选择器
		ID>类>标签
	3)引入方式和选择器综合，优先级？
		外部ID   VS  内部class
		先比较选择器的优先级，再去比较引入的方式
			
综合练习：
	外部样式表 --->ul  h1  h2  p  h3
选择器--->用合适的方式定位获取需要改善样式的集合
	ID--->快速定位唯一一个标签对象
	class--->跨标签关键字，1个或多个标签对象
	TAG标签--->相同标签关键字的所有标签对象


第二章 CSS高级应用	
2.1 高级选择器
2.1.1 并集选择器   或or
	并集是有多个选择器通过逗号连接而成的一组选择器，
	该组选择器获取的所有标签对象集合
	语法案例： 
		需求：h1,h2,h3,p,ul --->同一颜色
		h1,h2,h3,p,ul{表达式}
	并集是组合多个选择器
		.pt,#aa,p,h1{表达式}
2.1.2  交集选择器  且and
	由2个选择器组合而成，需同时满足2个条件方可
	第一个必须是标签选择器，第二个类或者ID选择器
	语法案例：p.abc
		获取所有段落p，且属性class值为abc的标签集合
2.1.3  后代选择器
	后代选择器，可以定义嵌套关系中的特定子标签，或者子孙标签集合的样式
		1)儿子   语法 用>表示父子关系    左边是父    右边是子
		2)子孙    语法  用空格表示祖孙关系   左边是祖  右边是子孙
		语法案例：
			div>p  --->div子标签p全部获取
			div p  --->div子孙标签p全部获取
		div         div        div
		h1 p  p		h1 p  p		h1 p  p	
		准确定位嵌套关系的2个方法
			1)绝对定位：嵌套标签的全路径
			2)相对定位：基于参考点的相对路径
						参考点-->ID选择器或类选择器直接定位一个对象
						在基于这个对象去遍历子对象
关于后代选择器的设计原则
	1、强烈建议使用相对路径，让选择器更加简洁清楚，方便定位
	2、只要规定不增加HTML代码的情况下，才考虑全路径描述，或者结构简单没有重复的结构
	3、绝对路径过多的情况，嵌套关系无法识别
		#div1>div p  corrcet!
		div  div div ul>div>div p  wrong!	

综合练习1：
	div ul li ol li  ul li ol li  div ol li.king
	背景为天蓝色

作业：
	div  div  div  div div
	p10>span5>i2
	1)仅第三个div的span--->橙色背景  蓝色字体  字体50px
	2)仅第二个div和第四个div i--->背景色黄色   字体蓝色 	
	3)仅第五个div的span和第三个的i --->字体变大60px 文本颜色天蓝色
			
			
			
2.2 CSS美化网页
2.2.1 背景样式background
	重要属性：
		1、background-color:背景色
		2、background-image:背景图片
		3、background-repeat:背景图片平铺
			值：repeat-x:水平重复
				repeat-y：垂直重复
				no-repeat:不重复
				repeat：二维均重复(默认)
		4、background-attachment：把图片作为附件贴上HTML页面
			值：fixed-->固定
				scroll--->滚动
		5、background-position：背景图片定位				
		6、opacity：0.1~1 透明 	
		7、background-size：规定背景图片的尺寸(图片过大时使用)
		
		8、旋转 --->div区域块
			transform:rotate(45deg);  degree
		9、背景色渐变
			background:linear-gradient
				(颜色1，颜色2，颜色n....)参数至少2个颜色，可以2个以上颜色无限制
				可以让多个颜色形成平稳过度的颜色特效
				自顶部开始的线性渐变，自上而下
			div1  yellow---->2个颜色渐变
							 5个颜色渐变
			
		简写属性：通过background一个属性设置几乎全部的背景样式
			简写属性需要空格分隔每个属性值
			简写顺序很重要，内容可以缺失，但是顺序必须一致
			顺序：
				background-color
				background-image	
							repeat
							attachment
							position
			div{background:yellow no-repeat scroll center center;}	
			
2.2.2 文字样式
	font-style:字体样式   normal 正常     italic 斜体
	font-weight：字体的粗细  normal 正常  bold粗体
	font-size:字体大小
	font-family：字体    微软雅黑  宋体等
	color： 字体颜色
	
	font简写属性顺序
		font：是否斜体   是否粗体  大小如何 文字集
			
2.2.3 文本和段落样式
	<p><h1~6>
	text-align:文本水平位置	
	text-decoration：文字修饰
	text-indent:文本的缩进
	line-height:行高
	text-shadow:文字阴影
		语法：
			text-shadow:水平阴影的距离   垂直阴影的距离
			 			模糊阴影的尺寸    阴影的颜色
			案例：
				text-shadow：5px 7px 1px blue; 
			
	column-count:规定元素应该被分隔的列数
		值：分几列

2.2.4  图片样式
	主要属性：
		width/height：控制图片尺寸   css-->px
		opacity： 图片透明0.1(0.0)~1.0完全不透明
		
	图文并茂案例练习
		1、图片尺寸过大超出div区域容器标签
			a、解决方案一  调整图片尺寸以适应div容器
			b、overflow  溢出处理属性 --->容器内部的内容尺寸超出了容器本身之后如何处理
				visible  默认   溢出依然可见
				hidden   溢出部分隐藏消失
				scroll   溢出的部分增加滚动条显示
				auto     自动判断
		2、图片和文字的环绕
			float：浮动属性，图片对应多行文本环绕特效处理
			
			
2.2.5  列表样式 --->导航界面
	   与超链接样式(伪类样式)
	CSS列表属性允许放置图像作为列表项标志等样式改善
	list-style-type:设置列表项更多的标志
	list-style-image:将图片设置为列表标志
	list-style-position：设置列表项标志的位置
	
	list-style 简写属性
		顺序：type  position image
	伪类样式和超链接样式
	CSS伪类用于向某些标签添加特殊效果，即它用于设置同一个标签在不同状态下的样式
	通常和超链接绑定使用
	:link   -->向未被访问的超链接添加样式
	:visited --->向已被访问
	:active   --->向被点击激活的
	:hover    --->当鼠标悬浮至标签体上方时
	设置超链接伪类样式一定要按照LVHA的书写顺序
	link--->visited--->hover-->active
	
	其中:hover  是大部分标签通用的
	其余用于超链接
	语法案例：
		标签：伪类样式
		a:link{样式表达式}
		a:hover{...}  img.hover{...}
			
		默认初始状态：selector{...}
		悬浮之后状态变化：selector:hover{...}	
			
			
			
			
2.2.6 鼠标样式
	美化鼠标形态
	语法：
		selector{cursor:value;}
	常用的值： pointer 小手  wait等待 help帮助
	案例：h1{cursor:pointer;}
2.2.7  边框样式(盒子模型三大属性之一border)
	用来修改标签对象的边框样式
	boder-color
	boder-width
	boder-style
	border 简写属性顺序：width  style  color
	border 可以分别修改四个边的任意一边样式
	边框为border-top   border-bottom  border-left border-right	
		
		
			
第三章 网页定位和盒子模型			
3.1 盒子模型(padding,margin)
	--->布局和计算尺寸
	盒子模型     box   model就是网页设计中常用的一种思维模式，即每一个标签都是盒子，
	小盒子--->具体的标签
	大盒子--->容器标签，可以包含各种小盒子标签
	简而言之，网页整体容器和每一个标签都是通过大大小小的盒子模型来规划布局和占据的尺寸
	1、元素或内容    
		width/height来控制的标签实际内容尺寸    标签内部
	2、内边距 padding
		内容和边框的距离，标签内部
	3、border边框 
		标签的最外层，出了边框就出了标签体
	4、margin外边距
		标签和相邻的兄弟标签，或者父标签的距离  标签外部
	计算：如何计算一个标签总的高度和宽度？
		总的宽度=左外边距+左边框+左内边距+内容+右内边距+右边框+右外边距
		总的高度=上外边距+上边框+上内边距+内容+下内边距+下边框+下外边距
	padding,margin,border
		x-width/height(方向):内边距  外边距
3.2 网页定位
	--->布局和定位
	1、布局标准流  static 
		页面中的各种标签按照块标签、行标签规则自动默认排列的布局。HTML默认方式
		块标签--->前后自动换行
		行标签--->从左至右依次排开，直到内容尺寸的边界被动换行，width
	2、相对布局 relative
		它是对于标签原位置做相对位移，依然在页面中保留原来的位置空间
			定位属性：四个方向：left right  top  bottom
				值：位移的数值，主要使用px单位
		案例：
			div-->h1  img  p
	3、绝对定位
		绝对定位和标准布局流完全无关，不占据static布局的空间，
		从HTML页面完全删除原有的位置空间，基于网页上方漂浮，可以放在任意的位置，
		只要根据尺寸定位即可
		语法：
			position：absolute;
				left 绝对像素位置   right  top  bottom
	4、固定定位 fixed
		绝对定位和固定定位类似，都不占据标准布局流空间，依据尺寸放在任意的位置，唯一的区别是：
			绝对定位--->基于网页文件的尺寸
			固定定位--->基于浏览器的尺寸

3.3  高级补充(optional)	
			
----------------------------CSS  END----------------------------------------------------------------------------			
					