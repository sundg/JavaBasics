JDBC&XML
第一章 JDBC基础
1.1 什么是JDBC？
	JDBC是指java数据库连接解决方案java database connectivity
	用一个标准的API(java应用编程接口)来解决连接各种各样数据库的技术
1.2 JDBC工作原理
	java程序        JDBC(API) <----> 驱动包            数据库
1.3 JDBC驱动包如何获得
	JDBCAPI--->90%接口--->没有实现 只是标准
	数据库提供商去根据JDBC API标准实现所有接口
	数据库提供商提供包--->1 数据库软件驱动   2 实现了JDBC API接口
	
	获得驱动--->每个数据库提供商的官网
		ojdbc6    6--->版本号
1.4 JDBC开发步骤
	step 1：加载驱动
		语法：
			Class.forName("oracle.jdbc.driver.OracleDriver");
	step 2:建立连接(程序的连接)
		创建一个connection 连接数据库的接口对象
		语法：
			Connection conn=DriverManager.getConnection(url,uesr,pwd);
			url-->数据库服务器IP地址+数据库地址表达式
			url格式：
				jdbc:oracle:thin:--->(固定)
				@192.168.228.2 --->远程Oracle
				@127.0.0.1--->本地Oracle
				:1521(Oracle端口号)
				:orcl(数据库实例名)
			访问本地的Oracle，使用system登录
			url="jdbc:oracle:thin:@127.0.0.1:1521:orcl";
			user="system";
			pwd="123456";
			Connection接口常用方法：
				createStatement();返回一个新创建的SQL语句对象
			DriverManager常用方法：
				getConnection(url,user,pwd);返回一个依据参数而创建的连接数据库的对象
			连接对象--->
	step 3:执行SQL语句
		Statement接口--->实例化对象：每一个SQL语句
		创建
			Statement sta=connection.createStatement();
		执行SQL
			常用方法：
				sta.executeQuery(sql字符串);-->执行查询
				返回查询结果集对象
				sta.executeUpdate(sql字符串);-->执行更新
				insert、update、delete
				返回整型数字，代表更新的行数
				--->更新了三行 insert、update、delete
	step 4:处理查询结果
		ResultSet--->实例化对象：每个查询语句的结果集
		ResultSet rs=SQL语句实例化对象.executeQuery(sql);
		
		常用方法：
			1、next();读取下一条记录，返回true、false
				true-->还有下一条记录
				false-->记录已读取完，无下一行记录信息
			2、get系列-->读取查询结果集数据
				a、读取字符串字段
				getString(字段名);-->varchar2 char
				getFloat、Int、Double(字段名)-->number
				getBoolean(字段名)-->true,false
				getDate、TimeStamp(字段名)-->date,timestamp
	step 5:释放连接资源
		不再使用数据库连接了，释放资源，避免占据数据库内存资源
		连接对象.close();释放连接
		statement.close();释放SQL语句
		resultSet.close();释放结果集
		书写顺序：(从小到大)
			resultset-->statement-->connection
		
				
案例1： 查询不和martin一个部门的员工信息，且按工资降序排列
	补充：
		1、读取每一行字段信息，有2种方法
			a、锁定字段名   如：rs.getString("ename"); (建议)
			b、锁定字段序号(索引) 如：rs.getString(1);
			索引从1开始，顺序就是查询结果集的顺序
			for example：select empno,ename,sal,job from...
						empno-->1   ename-->2...			
		2、读取数据表的字段名
			ResultSetMetaData--->数据集元数据，含查询数据字段结构
			ResultSetMetaData rsmd=rs.getMetaData();
			获取当前结果集的元数据对象
			rsmd.getColumnName(1索引);-->返回索引为1的字段名或别名			
				
晚自习作业: 
lab 1
JDBC查询工资总和最高的部门编号及办公所在地
lab 2
删除emp表中全部的数据，但是king除外   复制emp表先
lab 3
插入一条记录至dept表中，使用复制表  
    
1.5 帮助手册
JDBC英文帮助手册--> 数据库提供商官网 
....中文ostool  --> 开源中国社区官网

1.6 JDBC更新数据 update,delete,insert
案例1: 将MARTIN的部门的地址换成悉尼
ThirdJDBC.java


1.7 预编译SQL语句对象 PreparedStatement
	当SQL语句需要和多个交互动态变量绑定时，可以使用占位符来保留变量的位置，形成预编译SQl语句对象
	随后通过设置方法将参数值补全形成全部编译的SQL语句对象，再进行执行
	Statement--->添加新的记录sun_emp
	全编译语句，完整的SQL语句
	String sql="insert into sun_emp value(666,'fuck',...)";
	
	形成不完整的SQL语句
	String sql="insert into sun_emp value(?,?,?...)";
		?--->保留参数的位置和顺序
		从索引1开始补全参数，形成可以执行的完整SQL
		setInt,setString,setDouble...
		实例化的预编译SQL对象
		PreparedStatement ps=conn.PreparedStatement(预编译的SQL语句);
	案例：
		插入sun_dept数据，用户动态输入

第二章 JDBC高级
2.1 批处理
		使用PreparedStatement批量录入1000条--->不允许
		批处理单次最大支持50000个SQL语句队列
		定义：
			将类似的SQL语句，大批量的排在一个批次的队列里最后作为
			一个SQL语句命令执行，极大的提高执行效率和节约数据库资源
			
		批处理方法：SQL语句对象调用statement,preparedstatement
			addBatch();-->添加一个SQL进入批处理队列
			executeBatch();--->一次性执行队列的所有SQL语句
			clearBatch();--->清空当前队列
			
		statement--->支持不同的SQL语句
		preparedstatement--->支持相同的SQL语句
	案例：
		1、往部门表插入2万记录
		2、和martin一个部门的工资加倍，不和martin一个部门的减半
	总结：
		预编译在创建时有SQL语句参数
			PreparedStatement ps=conn.preparedStatement(sql);有参
			ps.addBatch();无参
			ps.executeUpdate();无参
			ps.executeQuery();无参
		完整编译SQL语句对象在创建时无参
			Statement st=conn.createStatement();无参
			st.executeQuery(sql);有参
			st.executeUpdate(sql);有参
			st.addBatch(sql);有参
2.2 事务
	JDBC中事物是自动提交的，如果出现异常，则将已经成功执行的部分数据提交，这是严重影响数据完整性和安全性的
	因此如果使用JDBC技术，则强烈建议引入事务进行人工干预
	
	JDBC的事务处理机制
	1、声明事务为人工干预，手动提交
		connection.setAutoCommit(boolean)
		true自动提交，false人工干预
	2、人工提交和人工回退
		在异常块catch  connection.rollback();
		如果发生异常，当前操作的数据全部回滚至初始状态
		try  connection.commit();
		如果没有发生异常，则在try语句块最后一行人工干预提交
2.3 DAO
	DAO  data access object 数据访问对象
	DAO对象就是数据库表的镜像文件，DAO每一个实例化对象就是一张表的映射对象，属性名==字段名
	
	DAO实体类(镜像文件)的实例化对象--->表中的一行记录
	
	第一步：增加emp表的镜像文件，DAO类
	第二步：类属性和表字段一一对应
	第三步：使用DAO类去加载和显示数据
		
	
	前置练习：
		查询除了king之外，员工收入前五的员工信息，且工资显示为货币美金
		
2.4 分页
2.4.1 定义
	分页就是定位显示第几条至第几条记录，基于定义了每页显示的记录数
2.4.2 分页计算通用公式
	int start=(page-1)*pagesize+1;
	int end=start+pagesize-1;
	案例：
		emp   14条记录    pagesize：每页显示的记录数 3
							查看第三页信息
	场景：
		部门表23000行记录   每页显示13个记录   查看第72页数据
2.4.3 Oracle如何实现分页查询
	分页解决方案：rownum 伪列
	rownum<=n总的查询记录数
	使用rownum分页--->将它从伪列转换成真实列
	转换语法：
		select *from
			 (转换查询层
			 	select ename,sal,..,rownum as 别名 from (真实的查询)
			 ) 
		where 伪列真实列名 between 开始 and 结束;
		
		
			
	案例1：
		emp 14  pagesize=4   page=?查询内容：姓名、工资、办公地点、按工资降序
	  		--分页层
	  		select *from
			 (
			 --rownum伪列转换层
			 	select ename,sal,loc,rownum as 伪列 from 
            (
            --实际查询层
              select t1.*,t2.* from sun_emp t1 join sun_dept t2 on t1.deptno=t2.deptno  
            )
			 ) 
			where 伪列 between 9 and 12
    		order by sal desc ;
    案例2：
    	查询sun_dept表，每页显示13，查看地121页的数据，按部门编号升序
    	
    	
   补充：select 内容 from 表 or 子查询 	
  
  //晚自习作业
  JDBC查询
  	1、查询部门平均收入前2名的部门编号，办公地点 
2.5 数据库池-->数据库连接池
2.5.1 定义
	配置创建一个数据库连接池对象的存放池，每次java程序调用时，
	无需重新创建链接对象，而是从池中获取已经存在的连接
	
	数据库连接对象-->无需担心创建和释放资源，直接取就可以
	
	优点：数据池中的连接对象最大效益化
	
	使用了APACHE的DBCP数据库池开源项目
	
	APACHE java世界开源项目的最大组织
	
	DBCP会根据我们的配置去建立数据库连接池环境
	开发人员：只要负责取其中一个数据库连接对象即可
2.5.2 配置数据库池
	1)创建一个属性文件---> .properties
	2)配置数据库环境参数
		initialsize:数据库池初始化创建连接对象数量数
		maxActive:创建连接池的最大数
		maxIdle:最大允许的空闲数
		minIdle:最小允许的空闲数
		maxWait:最大等待时间，单位毫秒，超时自动断开
	3)生成一个数据源的对象，实例化BasicDataSource
	4)读取属性的文件，将参数设置到本身数据池环境
	5)调用getConnection();无参-->自动获取一个连接对象
		不用担心创建和销毁，数据池会自动管理基于环境参数
		获取连接对象后只要专注于SQL语句的操作即可。
第三章 XML编程 
3.1 什么是XML
	可扩展的标记语言，被设计用来出书和存储数据，标签可以自定义，只要符合语法规范
3.2 XML语法
	-->可以理解为没有语法意义的HTML的标签文本
	1)所有的XMLwen标签需要开始和结束标记，除非没有文本内容
	2)每个XML文件只能有唯一一个根标签，如HTML的<html>
	3)每个标签都可以有文本，属性，子节点
3.3 XML编程--->DOM4J--->java
	DOM4J XML编程技术
	开发环境--->dom4j.jar
	http://www.dom4j.com
	
	1)写XML文件
		01 创建XML文件
			Document doc=DocumentHelper.createDocument();
		02 创建根节点
			Element ele=doc.addElement(节点关键字);
		03 创建节点
			Element ele=父节点.addElement(节点关键字);
		04 给节点添加属性
			Element对象.addAttribute("属性名","属性值");
		05 给节点添加文本
			Element对象.addText(文本内容);
		06 文件输出形成文件
			XMLWriter对象.write(documet对象);
	2)读XML文件
		01 Element对象.getName();--->标签关键字
		02 Element对象.getTextTrim();--->文本内容
		03 Element abc=document对象.getRootElement();
			--->读取根节点
		04 Element abc=根节点对象.element(标签关键字);
			--->读取任意子节点
		05 读取XML文件
			SAXReader reader=new SAXReader();
			Document doc=reader.read(xml文件全路径);
***************JDBC&XML END*********************   				

				
				
				
				
				
				
				
				
				
				
				